local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local event = ReplicatedStorage.Event

local enemies = {}
local state = {}

Players.PlayerRemoving:Connect(function(plr)
    local plrName = plr.Name
    enemies[plrName] = nil
    state[plrName] = nil
end)

local Helper = require(ReplicatedStorage.Helper)

function init(name)
    enemies[name] = {}
    state[name] = {false, false, false, false, false, false, false, false}
end

function tick_timer(name)
    for i,v in pairs(enemies[name]) do
        v.timer -= 1
    end
end

function check_lose(name)
    print("Check")
    for i,v in pairs(enemies[name]) do
        if v.timer == 0 then
            print("Lost")
            return true
        end
    end
    print("Still going")

    return false
end

event.Start.OnServerEvent:Connect(function(plr)
    -- init(plr)
    local name = plr.Name
    init(name)

    while true do -- This logic sucks, fix later by adding movement and shit
        local hex = Helper.get_random_two_hex()

        local enemy = {
            ["hex"] = hex,
            ["timer"] = 10 -- Time it takes for this to reach the funny
        }

        enemies[name][hex] = enemy
        -- print(enemies[name])
        print(enemies)

        event.SendEnemy:FireClient(plr, hex)
        task.wait(1)
        tick_timer(name)
        if check_lose(name) then
            local score = 10
            event.GameOver:FireClient(plr, score)
            return
        end
    end
end)

event.Flip.OnServerEvent:Connect(function(plr, bit)
    local name = plr.Name
    bit = tonumber(bit)
    if not state[name] then
        init(name)
    end
    state[name][bit] = not state[name][bit]
    print(state)
    event.UpdateState:FireClient(plr, state[name])
end)
